import warnings
warnings.filterwarnings('ignore')

# Import the numpy and pandas package
import numpy as np
import pandas as pd

# Data Visualisation
import matplotlib.pyplot as plt 
import seaborn as sns

advertising = pd.read_csv('./datasets/advertising.csv')
advertising.head()

advertising.shape
advertising.info()

advertising.describe()

advertising.isnull().sum()*100/advertising.shape[0]

fig, axs = plt.subplots(3, figsize = (5,5))
plt1 = sns.boxplot(advertising['TV'], ax = axs[0])
plt2 = sns.boxplot(advertising['Newspaper'], ax = axs[1])
plt3 = sns.boxplot(advertising['Radio'], ax = axs[2])
plt.tight_layout()
plt.show()

sns.boxplot(advertising['Sales'])
plt.show()

sns.pairplot(advertising, x_vars=['TV', 'Newspaper', 'Radio'], y_vars='Sales', height=4, aspect=1, kind='scatter')
plt.show()

sns.heatmap(advertising.corr(), cmap="YlGnBu", annot = True)
plt.show()

X = advertising['TV']
y = advertising['Sales']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.1, test_size=0.9, random_state=100)

X_train.head()
Y_train.head()

X_train = np.array(X_train).reshape(-1,1)
X_train.shape
Y_train = np.array(Y_train).reshape(-1,1)
Y_train.shape

from sklearn import linear_model

import numpy as np
from sklearn.linear_model import LinearRegression

lr = linear_model.LinearRegression()

lr.fit(X_train, y_train)
lr.intercept_
lr.coef_

plt.scatter(X_train, y_train)
plt.plot(X_train, 6.948 + 0.054*X_train, 'r')
plt.show()

y_train_pred = lr.predict(X_train)
res = (y_train - y_train_pred)

fig = plt.figure()
sns.distplot(res, bins = 15)
fig.suptitle('Error Terms', fontsize = 15)                  # Plot heading 
plt.xlabel('y_train - y_train_pred', fontsize = 15)         # X-label
plt.show()

X_test = np.array(X_test).reshape(-1,1)

# Predict the y values corresponding to X_test
y_pred = lr.predict(X_test)
y_pred


plt.scatter(X_test, y_test)
plt.plot(X_test, 6.948 + 0.054*X_test, 'r')

from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

#Returns the mean squared error; we'll take a square root
np.sqrt(mean_squared_error(y_test, y_pred))

r_squared = r2_score(y_test, y_pred)
r_squared

plt.scatter(X_test, y_test)
plt.plot(X_test, 6.948 + 0.054 * X_test, 'r')
plt.show()
plt.show()
